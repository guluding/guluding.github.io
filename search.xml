<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python threads</title>
    <url>/2020/07/%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Python多线程简介"><a href="#Python多线程简介" class="headerlink" title="Python多线程简介"></a>Python多线程简介</h2><ul>
<li>一个应用程序最少有一个进程，而一个进程有一个或多个线程</li>
<li>Python提供两个线程标准库 <code>_thread</code>  和 <code>threading</code></li>
<li>Python适用于I/O密集型，涉及到网络、磁盘I/O的任务，不适用于计算密集型任务</li>
</ul>
<a id="more"></a>

<h2 id="Python多线程实例"><a href="#Python多线程实例" class="headerlink" title="Python多线程实例"></a>Python多线程实例</h2><h3 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h3><h4 id="通过继承-Thread-类"><a href="#通过继承-Thread-类" class="headerlink" title="通过继承 Thread 类"></a>通过继承 Thread 类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, thread_name)</span>:</span></span><br><span class="line">        <span class="comment"># call the parent class's implementation for __init__</span></span><br><span class="line">        super(MyThread, self).__init__(name=thread_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;&#125; is running..."</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        MyThread(<span class="string">"thread &#123;&#125; "</span>.format(str(i))).start()</span><br></pre></td></tr></table></figure>



<h4 id="实例化threading-Thread对象"><a href="#实例化threading-Thread对象" class="headerlink" title="实例化threading.Thread对象"></a>实例化<code>threading.Thread</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(arg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'thread &#123;&#125; is running'</span>.format(str(arg)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>



<h3 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h3><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><p>Python多线程在执行过程中，每个线程各执行各的任务，不等待其它的线程，自顾自的完成自己的任务</p>
<p>如果我们希望主线程等子线程完成后再继续执行主线程，就需要调用 <code>join()</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start run:'</span>, time.strftime(<span class="string">'%H:%M:%S'</span>))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'stop run'</span>, time.strftime(<span class="string">'%H:%M:%S'</span>))</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=run)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)       <span class="comment"># 等待子线程启动</span></span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">'end code'</span>, time.strftime(<span class="string">'%H:%M:%S'</span>))</span><br></pre></td></tr></table></figure>



<h4 id="setDaemon-方法"><a href="#setDaemon-方法" class="headerlink" title="setDaemon()方法"></a>setDaemon()方法</h4><p>我们可以把<strong>子线程设置成主线程的守护线程</strong>，就是当主线程结束后，守护线程也会结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(threading.current_thread().getName(), <span class="string">'is working'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(threading.current_thread().getName(), <span class="string">'is finish'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=run, daemon=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># Run setDaemon() before the child thread become daemon thread</span></span><br><span class="line">        <span class="comment"># t.setDaemon(True)</span></span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Main thread is over'</span>)</span><br><span class="line">    print(<span class="string">'&#123;&#125; threads are alive'</span>.format(threading.active_count()))</span><br></pre></td></tr></table></figure>



<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><p>由于线程之间的任务执行是CPU进行随机调度的，并且每个线程可能只执行了n条指令之后就被切换到别的线程了</p>
<p>当多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，这被称为“线程不安全”</p>
<p>为了保证数据安全，Python 设计了<strong>线程锁，即同一时刻只允许一个线程操作该数据</strong></p>
<p>线程锁用于锁定资源，可以同时使用多个锁</p>
<p>先看看没有线程锁时，数据发生的错乱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span>     <span class="comment"># If this is your balance from bank</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">    t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(balance)</span><br></pre></td></tr></table></figure>

<p>结果并不等于0，可以明显看出数据发生错乱，你当然不愿意你的银行余额变成负数吧</p>
<h4 id="互斥锁Lock"><a href="#互斥锁Lock" class="headerlink" title="互斥锁Lock"></a>互斥锁Lock</h4><p>如果我们要确保 <code>balance</code> 计算正确，就要给 <code>change_it()</code> 上一把锁，当某个线程开始执行 <code>change_it()</code> 时，我们说，该线程因为获得了锁，因此其他线程不能同时执行 <code>change_it()</code> ，只能等待，直到锁被释放后，获得该锁以后才能改</p>
<p>由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突</p>
<p>创建一个锁就是通过 <code>threading.Lock()</code> 来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">    t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(balance)</span><br></pre></td></tr></table></figure>

<h4 id="信号Semaphore"><a href="#信号Semaphore" class="headerlink" title="信号Semaphore"></a>信号Semaphore</h4><p><code>semaphore</code> 是一个内置的计数器,每当调用 <code>acquire()</code> 时</p>
<p>内置计数器 -1,每当调用release()时，内置计数器 +1,计数器不能小于<strong>0</strong></p>
<p>当计数器为<strong>0</strong>时，<code>acquire()</code> 将阻塞线程直到其他线程调用 <code>release()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"ok"</span>,time.ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=())</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br></pre></td></tr></table></figure>

<p>可以看到，程序会在很短的时间内生成20个线程来打印一句话</p>
<p>如果在主机执行<strong>IO密集型任务</strong>的时候再执行这种类型的程序时，计算机就有很大可能会宕机。<br>这时候就可以为这段程序添加一个计数器功能，来限制一个时间点内的线程数量。</p>
<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">s1 = threading.Semaphore(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    s1.acquire()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"ok"</span>, time.ctime())</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        t1 = threading.Thread(target=run, args=())</span><br><span class="line">        t1.start()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br></pre></td></tr></table></figure>

<h4 id="事件Event"><a href="#事件Event" class="headerlink" title="事件Event"></a>事件Event</h4><p>事件线程锁的运行机制：全局定义了一个 <code>Flag</code>，如果 <code>Flag</code> 的值为 <code>False</code>，那么当程序执行 <code>wait()</code> 方法时就会阻塞，如果 <code>Flag</code> 值为 <code>True</code>，线程不再阻塞。这种锁，类似交通红绿灯（默认是红灯），它属于在红灯的时候一次性阻挡所有线程，在绿灯的时候，<strong>一次性放行所有</strong>排队中的线程。</p>
<ul>
<li><p><code>clear()</code> 方法会将事件的 <code>Flag</code> 设置为 <code>False</code></p>
</li>
<li><p><code>set()</code> 方法会将 <code>Flag</code> 设置为 <code>True</code></p>
</li>
<li><p><code>wait()</code> 方法将等待“红绿灯”信号</p>
</li>
<li><p><code>is_set()</code> 判断当前是否”绿灯放行”状态</p>
</li>
</ul>
<p>下面是一个模拟红绿灯，然后汽车通行的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    green_time = <span class="number">5</span></span><br><span class="line">    red_time = <span class="number">5</span></span><br><span class="line">    event.set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'\nThe green light ...'</span>)</span><br><span class="line">        time.sleep(green_time)</span><br><span class="line">        event.clear()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'\nThe red light ...'</span>)</span><br><span class="line">        time.sleep(red_time)</span><br><span class="line">        event.set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():</span><br><span class="line">            print(<span class="string">'The &#123;&#125; roared past'</span>.format(name))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'The &#123;&#125; arrives, sees the red light and stops'</span>.format(name))</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">'The &#123;&#125; drove off at the green light'</span>.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    light = threading.Thread(target=lighter,)</span><br><span class="line">    light.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">'Mercedes'</span>, <span class="string">'BMW'</span>, <span class="string">'Audi'</span>]:</span><br><span class="line">        car = threading.Thread(target=run, args=(name,))</span><br><span class="line">        car.start()</span><br></pre></td></tr></table></figure>

<h4 id="条件Condition"><a href="#条件Condition" class="headerlink" title="条件Condition"></a>条件Condition</h4><p><code>Condition</code> 称作条件锁，依然是通过 <code>acquire()/release()</code> 加锁解锁</p>
<ul>
<li><p><code>wait([timeout])</code> 方法将使线程进入 <code>Condition</code> 的等待池等待通知，并释放锁。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
<li><p><code>notify()</code> 方法将从等待池挑选一个线程并通知，收到通知的线程将自动调用 <code>acquire()</code> 尝试获得锁定（进入锁定池），其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
<li><p><code>notifyAll()</code> 方法将通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定，调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">con = threading.Condition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, action)</span>:</span></span><br><span class="line">        super(Foo, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.action = action</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> number</span><br><span class="line">        con.acquire()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"&#123;&#125; is running..."</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.action == <span class="string">"add"</span>:</span><br><span class="line">                number += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.action == <span class="string">'reduce'</span>:</span><br><span class="line">                number -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">'number = &#123;&#125;'</span>.format(number))</span><br><span class="line"></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">5</span> <span class="keyword">or</span> number == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'&#123;&#125; is pause'</span>.format(self.name))</span><br><span class="line">                con.notify()</span><br><span class="line">                con.wait()</span><br><span class="line">                print(<span class="string">'&#123;&#125; is reruning'</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">        con.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = Foo(<span class="string">"thread1"</span>, <span class="string">'add'</span>)</span><br><span class="line">    b = Foo(<span class="string">"thread2"</span>, <span class="string">'reduce'</span>)</span><br><span class="line">    a.start()</span><br><span class="line">    b.start()</span><br></pre></td></tr></table></figure>



<h4 id="定时器Timer"><a href="#定时器Timer" class="headerlink" title="定时器Timer"></a>定时器Timer</h4><p>定时器 <code>Timer</code> 类是 <code>threading</code> 模块中的一个小工具，用于指定n秒后执行某操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello, world"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Timer(<span class="number">1</span>, hello)  <span class="comment"># One second later</span></span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>



<h4 id="with语句使用线程锁"><a href="#with语句使用线程锁" class="headerlink" title="with语句使用线程锁"></a>with语句使用线程锁</h4><p>在一些“老的” Python 代码中，显式获取和释放锁是很常见的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    A counter object that can be shared by multiple threads.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    _lock = threading.RLock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value = <span class="number">0</span>)</span>:</span></span><br><span class="line">        self._value = initial_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Increment the counter with locking</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">            self._value += delta</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Decrement the counter with locking</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">             self.incr(-delta)</span><br></pre></td></tr></table></figure>

<p><code>Lock</code> 对象和 <code>with</code> 语句块一起使用可以保证互斥执行，就是每次只有一个线程可以执行 <code>with</code> 语句包含的代码块。<code>with</code> 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁</p>
<p>相比于上面显式调用的方法，<strong><code>with</code> 语句更加优雅，也更不容易出错</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    A counter object that can be shared by multiple threads.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value = <span class="number">0</span>)</span>:</span></span><br><span class="line">        self._value = initial_value</span><br><span class="line">        self._value_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Increment the counter with locking</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">             self._value += delta</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Decrement the counter with locking</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">             self._value -= delta</span><br></pre></td></tr></table></figure>

<p>[^]: </p>
<p>参考资料:</p>
<blockquote>
<p>刘江的博客教程        <a href="https://www.liujiangblog.com/course/python/79" target="_blank" rel="noopener">https://www.liujiangblog.com/course/python/79</a></p>
<p>廖雪峰的官方网站    <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688</a></p>
<p>Python cookbook    <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p04_locking_critical_sections.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p04_locking_critical_sections.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>threads</tag>
      </tags>
  </entry>
</search>
